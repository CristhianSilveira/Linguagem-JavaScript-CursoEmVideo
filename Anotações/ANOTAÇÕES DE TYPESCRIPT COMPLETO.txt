                      ------ TypeScript Completo ------


        Olá, criei esse arquivo com as principais aplicações do TypeScript explicadas e com exemplos.

                OBS: os exemplos não estão formatados para não ocupar muitas linhas do arquivo.


1- Introdução: TypeScript é JavaScript com sintaxe adicionada para tipos.
    1.1- O que é TypeScript?: TypeScript é um superconjunto sintático de JavaScript que adiciona tipagem estática. Isso basicamente significa que o TypeScript adiciona sintaxe ao JavaScript, permitindo que os desenvolvedores adicionem tipos. a extensão de aquivo é .ts

    1.2- Por que devo usar o TypeScript?: JavaScript é uma linguagem vagamente tipada. Pode ser difícil entender quais tipos de dados estão sendo passados ​​em JavaScript. Em JavaScript, parâmetros e variáveis ​​de função não possuem nenhuma informação! Portanto, os desenvolvedores precisam consultar a documentação ou adivinhar com base na implementação. O TypeScript permite especificar os tipos de dados que estão sendo transmitidos no código e tem a capacidade de relatar erros quando os tipos não correspondem. Por exemplo, o TypeScript relatará um erro ao passar uma string para uma função que espera um número. JavaScript não.

2- Tutoriais: 
    2.1- Tipos simples do TypeScript: Existem três primitivos principais em JavaScript e TypeScript. Boolean [valores verdadeiros ou falsos], number [números inteiros e valores de ponto flutuante] e string [valores de texto como "TypeScript Rocks"].   EX: let Nome: string = "Danilo";

    2.2- Tipos especiais do TypeScript: O TypeScript tem tipos especiais que podem não se referir a nenhum tipo específico de dados.

        2.2.1- Tipo: qualquer: any é um tipo que desabilita a verificação de tipo e efetivamente permite que todos os tipos sejam usados.   EX: let v: any = true;  v = "string";

        2.2.2- Tipo: desconhecido: unknown é uma alternativa semelhante, mas mais segura, ao any.   EX: let w: unknown = 1;  w = "string";

    2.3- Matrizes TypeScript: O TypeScript tem uma sintaxe específica para digitar arrays.   EX: const nomes: string[] = []; nomes.push("Danilo");

        2.3.1- Somente leitura: A palavra-chave readonly pode impedir que os arrays sejam alterados.   EX: const nomes: readonly string[] = ["Danilo"];   nomes.push("Jair");

    2.4- Tuplas TypeScript: Uma tupla é uma matriz tipada com comprimento e tipos predefinidos para cada índice. As tuplas são ótimas porque permitem que cada elemento na matriz seja um tipo conhecido de valor. Para definir uma tupla, especifique o tipo de cada elemento no array: OBS: a ordem importa em nossa tupla.   EX: let ourTuple: [number, boolean, string];   ourTuple = [5, false, 'Estou aprendendo'];

        2.4.1- Tupla somente leitura: Uma boa prática é fazer sua tupla readonly.   EX: const ourReadonlyTuple: readonly [number, boolean, string] = [5, true, 'Estou aprendendo'];

    2.5- Tipos de objeto TypeScript: O TypeScript possui uma sintaxe específica para digitar objetos.   EX: const car: { type: string, modelo: string, Ano: number } = {  type: "Toyota",  modelo: "Corolla",  Ano: 2009  };

    2.6- Enums TypeScript: Um enum é uma "classe" especial que representa um grupo de constantes (variáveis ​​imutáveis). Enums vêm em dois tipos string e numeric.

        2.6.1- Enumerações Numéricas: Por padrão, enums inicializarão o primeiro valor 0e adicionarão 1 a cada valor adicional.   EX: enum CardinalDirections {  North,  East,  South,  West  }  let currentDirection = CardinalDirections.South;  console.log(currentDirection);  >>Resultado: 2

        2.6.2- Enumerações Numéricas: Você pode definir o valor do primeiro enum numérico e incrementá-lo automaticamente a partir disso.   EX: enum CardinalDirections {  North = 1,  East,  South,  West  }   console.log(CardinalDirections.West);  >>Resultado: 4

        2.6.3- Enumerações Numéricas: Você pode atribuir valores numéricos exclusivos para cada valor de enumeração. Então os valores não serão incrementados automaticamente.   EX: enum StatusCodigo {  NaoEncontrado= 404,  Sucesso = 200,  Aceito = 202,  PedidoInválido = 400  }  console.log(StatusCodigo.NaoEncontrado);  >>Resultado: 404

        2.6.4- Enumerações de String: Enums também podem conter strings. Isso é mais comum do que enumerações numéricas, devido à sua legibilidade e intenção.   EX: enum CardinalDirecao {  Norte = 'Norte',  Leste = "Leste",  Sul = "Sul",  Oeste = "Oeste"  };  console.log(CardinalDirecao.Oeste);  >>Resultado: Oeste

    2.7- Aliases e interface: O TypeScript permite que os tipos sejam definidos separadamente das variáveis ​​que os usam. Aliases e Interfaces permitem que os tipos sejam facilmente compartilhados entre diferentes variáveis/objetos.

        2.7.1- Aliases de tipo: Aliases de tipo permitem definir tipos com um nome personalizado (um Alias).   EX: type CarroAno = number  type CarroTipo = string  type CarroModelo = string  type Carro = {  Ano: CarroAno,  tipo: CarroTipo,  modelo: CarroModelo  }  const carroAno: CarroAno = 2001  const carroTipo: CarroTipo = "Toyota"  const carroModelo: CarroModelo = "Corolla"  const carro: Carro = {  Ano: carroAno,  tipo: carroTipo,  modelo: carroModelo };

        2.7.2- Interfaces: As interfaces são semelhantes aos aliases de tipo, exceto que se aplicam apenas a tipos object.   EX: interface Retangulo {  Altura: number,  Largura: number  }  const retangulo: Retangulo = {  Altura: 20,  Largura: 10  };

    2.8- Tipos de união: Os tipos de união são usados ​​quando um valor pode ser mais do que um único tipo. Por exemplo, quando uma propriedade seria string ou number.
        2.8.1- União | (OU): Usando o | estamos dizendo que nosso parâmetro é a string ou number:   EX: function printStatusCode(code: string | number) {  console.log(`Meu código de status é ${code}.`)  }  printStatusCode(404);  printStatusCode('404');

    2.9- Funções TypeScript: O TypeScript tem uma sintaxe específica para digitar parâmetros de funções e valores de retorno.
        2.9.1- Tipo de retorno: O tipo do valor retornado pela função pode ser explicitamente definido.   EX: function getTime(): number {  return new Date().getTime();  }

        2.9.2- Tipo de retorno nulo: O tipo void pode ser usado para indicar que uma função não retorna nenhum valor.   EX: function printHello(): void {  console.log('Hello!');  }

        2.9.3- Parâmetros: Os parâmetros de função são digitados com uma sintaxe semelhante às declarações de variáveis.   EX: function multiplica(a: number, b: number) {  return a * b;  }  console.log(multiplica(2,5))  >>Resultado: 10

        2.9.4- Parâmetros padrão: Para parâmetros com valores padrão, o valor padrão vai após a anotação de tipo.   EX: function pow(valor: number, expoente: number = 3) {  return valor ** expoente;  }  console.log(pow(10))  >>Resultado: 1000

    2.10- Casting TypeScript: Casting é o processo de substituição de um tipo.
        2.10.1- Transmitindo com as: Uma maneira direta de converter uma variável é usando a palavra-chave as, que mudará diretamente o tipo da variável fornecida.   EX: let x: unknown = 'Olá'; console.log((x as string).length);  >>Resultado: 3

    2.11- Classes TypeScript: O TypeScript adiciona tipos e modificadores de visibilidade às classes JavaScript.
        2.11.1- Membros: Tipos: Os membros de uma classe (propriedades e métodos) são digitados usando anotações de tipo, semelhantes às variáveis.   EX: class Pessoa {  nome: string;  }  const pessoa = new Pessoa();  pessoa.nome = "Jaqueline";

    2.12- Tipos de utilitário TypeScript: O TypeScript vem com um grande número de tipos que podem ajudar com algumas manipulações de tipos comuns, geralmente chamadas de tipos utilitários.
        2.12.1- Parcial: Partial altera todas as propriedades em um objeto para serem opcionais.   EX: interface Point {  x: number;  y: number;  }  let pointPart: Partial<Point> = {};  pointPart.x = 10;

        2.12.2- Obrigatório: Required altera todas as propriedades em um objeto para serem necessárias.   EX: interface Carro {  marca: string;  modelo: string;  quilometragem?: number;  }  let meuCarro: Required<Carro> = {  marca: 'Ford',  modelo: 'Focus',  quilometragem: 12000  };

        2.12.3- Registro: Record é um atalho para definir um tipo de objeto com um tipo de chave e um tipo de valor específicos.   EX: const nomeIdadeMap: Record<string, number> = {  'Alice': 21,  'Bob': 25};

    2.13- TypeScript Keyof: keyof é uma palavra-chave no TypeScript que é usada para extrair o tipo de chave de um tipo de objeto.
        2.13.1- keyof com chaves explícitas: Quando usado em um tipo de objeto com chaves explícitas, keyof cria um tipo de união com essas chaves.   EX: interface Pessoa {  nome: string;  idade: number;  }  function printPessoaPropriedade(pessoa: Pessoa, propriedade: keyof Pessoa) {  console.log(`Imprimindo o ${propriedade} da propriedade da pessoa: "${pessoa[propriedade]}"`);  }  let pessoa = {  nome: "Max",  idade: 27  };  printPessoaPropriedade(pessoa, "nome");
