                     ------ React Completo ------


        Olá, criei esse arquivo com as principais aplicações do React explicadas e com exemplos.

                OBS: os exemplos não estão formatados para não ocupar muitas linhas do arquivo.


1- Introdução: React é uma biblioteca JavaScript para construir interfaces de usuário. O React é usado para criar aplicativos de página única. O React nos permite criar componentes de interface do usuário reutilizáveis.
    1.1- Comandos para criar uma pasta React: Primeiramente abrir o terminal no vscode e quando abrir digitar: node -v e npm -v para verificar se está executando o node. Se estiver tudo certo, escreva: npx create-react-app (nome da pasta)   EX: npx create-react-app meu-projeto. para abri o projeto digite: npm start

2- ES6: ES6 significa ECMAScript 6.
    2.1- Classes: Uma classe é um tipo de função, mas em vez de usar a palavra-chave function para iniciá-la, usamos a palavra-chave class, e as propriedades são atribuídas dentro de um método constructor().   EX: class Carro {  constructor(name) {  this.brand = name;  }  }  const meucarro = new Carro("Ford");

    2.2- Funções de Seta: As funções de seta nos permitem escrever uma sintaxe de função mais curta.   EX: hello = () => {  return "Hello World!";  }

    2.3- Variáveis: Agora, com o ES6, existem três maneiras de definir suas variáveis: var, let, e const.
        
    2.4- Métodos de Matriz: Existem muitos métodos de array JavaScript. Um dos mais úteis no React é o método .map(). O método .map() permite executar uma função em cada item do array, retornando um novo array como resultado.   EX: const myArray = ['Maçã', 'Banana', 'Laranja'];  const myList = myArray.map((item) => <p>{item}</p>)

    2.5- Desestruturando um Array: Podemos ter um array ou objeto com o qual estamos trabalhando, mas só precisamos de alguns dos itens contidos neles. A desestruturação facilita a extração apenas do necessário.   EX: const vehicles = ['mustang', 'f-150', 'expedition']; const [car, truck, suv] = vehicles;

    2.6- Desestruturando Objetos: Aqui está a nova maneira de usar um objeto dentro de uma função:   EX: const VeiculoUm = {  marca: 'Ford',  modelo: 'Mustang',  tipo: 'carro',  ano: 2021,   cor: 'vermelho'  }  MeuVeiculo(VeiculoUm);  function MeuVeiculo({tipo, cor, marca, modelo}) {  const mensagem = 'Meu ' + tipo + ' é um ' + cor + ' ' + marca + ' ' + modelo + '.';  }

    2.7- Operador Spread: O operador Spread do JavaScript ( ...) nos permite copiar rapidamente todo ou parte de um array ou objeto existente para outro array ou objeto.   EX: const NumerosUm = [1, 2, 3];  const NumerosDois = [4, 5, 6];  const ConbinaNumeros = [...NumerosUm, ...NumerosDois];

    2.8- Operador Ternário: O operador ternário é um operador condicional simplificado como if/ else.  Sintaxe: condição ? <expressão if verdadeira> : <expressão if falsa>.   EX: function renderApp() {  document.getElementById("demo").innerHTML = "Bem Vindo!";  }  function renderLogin() {  document.getElementById("demo").innerHTML = "Por favor, realize o login";  }  let autenticaçao = true;  autenticaçao ? renderApp() : renderLogin();

3- Renderizar HTML, JSX, Componentes e Props de Componentes:
    3.1- Renderizar HTML: O objetivo do React é, de várias maneiras, renderizar HTML em uma página da web. React renderiza HTML para a página da web usando uma função chamada createRoot()e seu método render().
        3.1.1- A Função createRoot: A função createRoot() recebe um argumento, um elemento HTML. O objetivo da função é definir o elemento HTML onde um componente React deve ser exibido.

        3.1.2- O método de render: O método render() é então chamado para definir o componente React que deve ser renderizado.   EX: const container = document.getElementById('raiz');  const root = ReactDOM.createRoot(container);  root.render(<p>Olá</p>);

    3.2- JSX: JSX significa JavaScript XML. JSX nos permite escrever HTML em React.
        3.2.1- Codificação JSX: JSX nos permite escrever elementos HTML em JavaScript e colocá-los no DOM sem quaisquer métodos createElement()  ou appendChild().   EX: const MeuElemento = <h1>Eu amo JSX!</h1>;  const root = ReactDOM.createRoot(document.getElementById('root'));  root.render(MeuElemento);  >>Resultado: Eu amo JSX!
        3.2.2- Elementos devem ser fechados: O JSX segue as regras XML e, portanto, os elementos HTML devem ser fechados corretamente.   EX: const myElement = <input type="text" />;

    3.3- Componentes: Componentes são como funções que retornam elementos HTML. Os componentes vêm em dois tipos, componentes de classe e componentes de função.
        
        3.3.1- Componente de classe: Um componente de classe deve incluir a instrução extends React.Component. Esta instrução cria uma herança para React.Component e dá ao seu componente acesso às funções do React.Component. O componente também requer um método render(), este método retorna HTML.   EX: class Carro extends React.Component {  render() {  return <h2>Olá, Eu tenho um Carro!</h2>;  }  }

        3.3.2- Componente de Função: Um componente Function também retorna HTML e se comporta da mesma maneira que um componente Class, mas os componentes Function podem ser escritos usando muito menos código e são mais fáceis de entender. Para usar este componente em seu aplicativo, use uma sintaxe semelhante ao HTML normal: <nomedafuncao />  EX: function Carro() {  return <h2>Olá, Eu tenho um Carro!</h2>;}  const root = ReactDOM.createRoot(document.getElementById('root'));  root.render(<Carro />);
        
        3.3.3- Props: Props são argumentos passados ​​para componentes React. Props são passados ​​para componentes via atributos HTML. São somente leitura.   EX: function Carro(props) {  return <h2>Eu tenho um { props.marca }!</h2>;  }  const myElement = <Carro marca="Ford" />;  >>Resultado: Eu tenho um Ford

        3.3.4- Renderização Condicional: No React, você pode renderizar componentes condicionalmente. Existem várias maneiras de fazer isso. Podemos usar o operador if JavaScript para decidir qual componente renderizar. Outra maneira de renderizar condicionalmente um componente React é usando o operador &&.   EX: function Gol(props) {  const FoiGol = props.FoiGol;  if (FoiGol) {  return <FezGol/>;  }  return <SemGol/>;  }

4- Eventos: Assim como os eventos HTML DOM, o React pode executar ações com base nos eventos do usuário. O React tem os mesmos eventos do HTML: click, change, mouseover etc.
    4.1- Adicionando eventos: Os eventos React são escritos na sintaxe camelCase: onClick em vez de onclick. Os manipuladores de eventos React são escritos entre chaves: onClick={shoot}  em vez de onClick="shoot()".   EX: <button onClick={shoot}>Tente a chance!</button>

5- Listas e Formulários:
    5.1- Listas: No React, você renderizará listas com algum tipo de loop. O método de array JavaScript map() é geralmente o método preferido.   EX: function Carro(props) {  return <li>Eu tenho um { props.marca }</li>;  }  function Garagem() {  const carros = [  {id: 1, marca: 'Ford'},  {id: 2, marca: 'BMW'},  {id: 3, marca: 'Audi'}  ];  return (  <>  <h1>Qual carro está na minha garagem?</h1>  <ul>  {carros.map((carro) => <Carro key={carro.id} marca={carro.marca} />)}  </ul>  </>  );  }  const root = ReactDOM.createRoot(document.getElementById('root'));  root.render(<Garagem />);

    5.2- Formulários: Assim como no HTML, o React usa formulários para permitir que os usuários interajam com a página da web.
        5.2.1- Adicionando formulários no React:   EX: function MyForm() {  return (  <form>  <label>Enter your name:  <input type="text" />  </label>  </form>  )  }  const root = ReactDOM.createRoot(document.getElementById('root'));  root.render(<MyForm />);

6- Estilos:
    6.1- Estilo CSS: Existem muitas maneiras de estilizar o React com CSS, este tutorial examinará mais de perto três maneiras comuns: Estilo integrado, folhas de estilo CSS e Módulos CSS.
        6.1.1- Estilo integrado: Para estilizar um elemento com o atributo de estilo embutido, o valor deve ser um objeto JavaScript.   EX: const Header = () => {  return (  <>  <h1 style={{color: "red"}}>Olá Estilo!</h1>  <p>Adicionando um pouco de estilo!</p>  </>  );  }   OBS: Como o CSS embutido é escrito em um objeto JavaScript, as propriedades com separadores de hífen, como background-color, devem ser escritas com a sintaxe camel case: [Usar backgroundColor em vez de background-color]

        6.1.2- Folha de estilo CSS: Você pode escrever seu estilo CSS em um arquivo separado, basta salvar o arquivo com a extensão .css de arquivo e importá-lo em seu aplicativo.

7- Hooks (Ganchos): Os ganchos permitem que os componentes de função tenham acesso ao estado e a outros recursos do React. Por causa disso, os componentes de classe geralmente não são mais necessários.
    7.1- Regras de Hooks: Existem 3 regras para ganchos: Os ganchos só podem ser chamados dentro dos componentes da função React, Ganchos só podem ser chamados no nível superior de um componente, Ganchos não podem ser condicionais.

    7.2- useState Hooks: O React useStateHook nos permite rastrear o estado em um componente de função. O estado geralmente se refere a dados ou propriedades que precisam ser rastreados em um aplicativo. Para usar o useStateHook, primeiro precisamos inserir import em nosso componente.   EX: import { useState } from "react";
        
        7.2.1- Inicializar useState: Inicializamos nosso estado chamando useState no componente de função. useState aceita um estado inicial e retorna dois valores: O estado atual e Uma função que atualiza o estado.   EX: import { useState } from "react";  function CorFavorita() {  const [cor, setaCor] = useState("");  }  >>Explicando: O primeiro valor, cor, é o nosso estado atual. O segundo valor, setaCor, é a função usada para atualizar nosso estado.

        7.2.2- Ler estado: Agora podemos incluir nosso estado em qualquer lugar em nosso componente.   EX: import { useState } from "react";  import ReactDOM from "react-dom/client";  function CorFavorita() {  const [cor, setaCor] = useState("vermelho");  return <h1>Minha cor favorita é {cor}!</h1>  }  const root = ReactDOM.createRoot(document.getElementById('root'));  root.render(<CorFavorita />);

        7.2.3- Atualizar estado: Para atualizar nosso estado, usamos nossa função de atualização de estado.   EX: import { useState } from "react";  import ReactDOM from "react-dom/client";  function CorFavorita() {  const [cor, setaCor] = useState("vermelho");  return ( <h1>Minha cor favorita é {cor}!</h1> <button  type="button"  onClick={() => setaCor("azul")}  >Azul</button>  </>  )  }  const root = ReactDOM.createRoot(document.getElementById('root'));  root.render(<CorFavorita />);

    7.3- useEffect Hooks: O useEffect Hooks permite que você execute efeitos colaterais em seus componentes. Alguns exemplos de efeitos colaterais são: buscar dados, atualizar diretamente o DOM e temporizadores. useEffect aceita dois argumentos, O segundo argumento é opcional. Sintaxe: useEffect(<function>, <dependency>)   EX: import { useState, useEffect } from "react";  import ReactDOM from "react-dom/client";  function Tempo() {  const [conta, setaConta] = useState(0);  useEffect(() => {  setTimeout(() => {  setaConta((conta) => conta + 1);  }, 1000);  }, []);  return <h1>Eu contei {conta} vezes!</h1>;  }  const root = ReactDOM.createRoot(document.getElementById('root'));  root.render(<Tempo />);

    7.4- useContext Hooks: O React Context é uma maneira de gerenciar o estado globalmente. Ele pode ser usado junto com o useStateHook para compartilhar o estado entre componentes profundamente aninhados mais facilmente do que useState sozinho.

    7.5- useRef Hooks: O useRef Hooks permite que você persista valores entre as renderizações. Ele pode ser usado para armazenar um valor mutável que não causa uma nova renderização quando atualizado. Ele pode ser usado para acessar um elemento DOM diretamente.

    7.6- useReducer Hooks: O useReducer hooks é semelhante ao useState Hooks. Ele permite a lógica de estado personalizada. Sintaxe: O gancho useReducer aceita dois argumentos: useReducer(<redutor>, <initialState>)  [A função reducer contém sua lógica de estado personalizada e initialState pode ser um valor simples, mas geralmente conterá um objeto.]

    7.7- useCallback Hooks: O React useCallbackHook retorna uma função de retorno de chamada memorizada. Isso nos permite isolar funções com uso intensivo de recursos para que não sejam executadas automaticamente em cada renderização. O useCallbackHook só é executado quando uma de suas dependências é atualizada.

    7.8- useMemo Hooks: O React useMemoHook retorna um valor memorizado. O useMemoHook só é executado quando uma de suas dependências é atualizada. Isso pode melhorar o desempenho. Os ganchos useMemo e useCallback são semelhantes. A principal diferença é que useMemo retorna um valor memorizado e useCallback retorna uma função memorizada.

    7.9- Hooks Personalizados: Ganchos são funções reutilizáveis. Quando você tem lógica de componente que precisa ser usada por vários componentes, podemos extrair essa lógica para um Hook personalizado. Ganchos personalizados começam com "use". Exemplo: useFetch.
