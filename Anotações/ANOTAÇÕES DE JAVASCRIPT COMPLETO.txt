                        ------ JavaScript Completo ------


        Olá, criei esse arquivo com as principais aplicações do JavaScript explicadas e com exemplos.

                OBS: os exemplos não estão formatados para não ocupar muitas linhas do arquivo.


1- Introdução: 
        JavaScript é a linguagem de programação mais popular do mundo. JavaScript é a linguagem de programação da Web. Este tutorial ensinará JavaScript do básico ao avançado. OBS: JavaScript pode alterar o conteúdo HTML, Um dos muitos métodos JavaScript HTML é getElementById(), JavaScript aceita aspas simples e duplas.
    
    1.1- A tag <script>:
            Em HTML, o código JavaScript é inserido entre as tags <script> e </script>.

    1.2- Possibilidades de exibição do JavaScript: 
            O JavaScript pode "exibir" dados de diferentes maneiras:
            Escrevendo em um elemento HTML, usando innerHTML.
        EX: document.getElementById("demo").innerHTML = 5 + 6;
        
            Escrevendo na saída HTML usando document.write().
        EX: document.write(5 + 6);
        
            Escrevendo em uma caixa de alerta, usando window.alert().
        EX: window.alert(5 + 6);
        
            Escrevendo no console do navegador, usando console.log().
        EX: console.log(5 + 6);

    1.3- Instruções JavaScript: 
            As instruções JavaScript são compostas por: Valores, operadores, expressões, palavras-chave e comentários. Ponto e vírgula separam instruções JavaScript. Adicione um ponto e vírgula no final de cada instrução executável.

    1.4- Comentários: 
            Os comentários JavaScript podem ser usados ​​para explicar o código JavaScript e torná-lo mais legível.
        1.4.1- Comentários de linha única: 
                Os comentários de linha única começam com //. Qualquer texto entre // e no final da linha será ignorado pelo JavaScript (não será executado).
        
        1.4.2- Comentários de várias linhas: 
                Os comentários de várias linhas começam com /* e terminam com */. Qualquer texto entre /* e */ será ignorado pelo JavaScript.

2- Variáveis, Let, Const e Tipos de dados:
    2.1- Variáveis: 
            Existem 4 maneiras de declarar uma variável JavaScript:Usando var, Usando let, Usando const e Usando nada
        2.1.1- O que são Variáveis? 
                As variáveis ​​são contêineres para armazenar dados (armazenar valores de dados)
    
    2.2- Identificadores JavaScript: 
            Todas as variáveis ​​JavaScript devem ser identificadas com nomes exclusivos. Esses nomes exclusivos são chamados de identificadores. Os identificadores podem ser nomes curtos (como x e y) ou nomes mais descritivos (idade, valor, totalVolume). As regras gerais para a construção de nomes para variáveis ​​(identificadores exclusivos) são: Os nomes podem conter letras, dígitos, sublinhados e cifrões. Os nomes devem começar com uma letra. Os nomes também podem começar com $ e _ . Os nomes diferenciam maiúsculas de minúsculas (y e Y são variáveis ​​diferentes). Palavras reservadas (como palavras-chave JavaScript) não podem ser usadas como nomes.

    2.3- O operador de atribuição: 
            Em JavaScript, o sinal de igual (=) é um operador de "atribuição", não um operador "igual a".   OBS: O operador "igual a" é escrito como == em JavaScript.

    2.4- Let: 
            Variáveis ​​definidas com let não podem ser redeclaradas. As variáveis ​​definidas com let devem ser declaradas antes do uso. Variáveis ​​definidas com let têm escopo de bloco .

    2.5- Const:
            Variáveis ​​definidas com const não podem ser Redeclaradas. As variáveis ​​definidas com const não podem ser reatribuídas. Variáveis ​​definidas com const têm escopo de bloco. Sempre declare uma variável com const quando souber que o valor não deve ser alterado.

    2.6- Tipos de Dados:
            JavaScript tem 8 tipos de dados: 1- String, 2- Number, 3- Bigint, 4- Booleano, 5- Undefined, 6- Null, 7- Símbolo, 8- Object

            2.6.1- Strings: Strings são escritas com aspas. Você pode usar aspas simples ou duplas:   EX: let cor = "Amarelo";   EX2: var cor = 'Amarelo';

            2.6.2- Number: Todos os números JavaScript são armazenados como números decimais (ponto flutuante).   EX: let x = 34;

            2.6.3- BigInt: pode ser usado para armazenar valores inteiros que são muito grandes para serem representados por um número JavaScript normal.   EX: let x = BigInt("123456789012345678901234567890");

            2.6.4- Booleano: Booleanos podem ter apenas dois valores: true ou false.

            2.6.5- Object: Objetos JavaScript são escritos com chaves {}. As propriedades do objeto são escritas como pares nome:valor, separados por vírgulas.   EX: const pessoa = {PrimeiroNome:"João", Sobrenome:"Silva", idade:50, CorOlho:"Azul"};

            2.6.6- Undefined: Em JavaScript, uma variável sem valor tem o valor undefined. O tipo também é undefined.   EX: let car; (O valor é undefined, e o tipo é undefined)

            2.6.7- Null: Uma string vazia tem um valor legal e um tipo.   EX: let car = ""; (O valor é "", e o tipo é "string")

3- Booleanos: 
        Um JavaScript Boolean representa um dos dois valores: true ou false.   EX: Boolean(10 > 9) ou (10 > 9) >>Resultado: true

4- Números:
        JavaScript tem apenas um tipo de número. Os números podem ser escritos com ou sem casas decimais.
    4.1- Adicionando números e strings:   
            OBS:JavaScript usa o operador + para adição e concatenação. Os números fazem adição. Strings são concatenadas.   EX: let x = 10; let y = 20; let z = x + y;  >>Resultado: 30   EX2: let x = "10"; let y = "20"; let z = x + y;  >>Resultado: 1020

    4.2- NaN (Não é um Número): NaN é uma palavra reservada do JavaScript que indica que um número não é um número válido. Tentar fazer aritmética com uma string não numérica resultará em NaN(não é um número).   EX: let x = 100 / "Apple";   >>Resultado: NaN

    4.3- Métodos numéricos: Esses métodos numéricos podem ser usados ​​em todos os números JavaScript: 
            4.3.1- toString(): Retorna um número como uma string.   EX: let x = 123; x.toString();  >>Resultado: 123
            4.3.2- toExponential(): Retorna um número escrito em notação exponencial.   EX: let x = 9.656; x.toExponential(2);  >>Resultado: 9.66e+0
            4.3.3- toFixed(): Retorna um número escrito com um número de casas decimais.   EX: let x = 9.656; x.toFixed(2);  >>Resultado: 9,66
            4.3.4- toPrecision(): Retorna um número escrito com um comprimento especificado.   EX: let x = 9.656; x.toPrecision(2);  >>Resultado: 9,7
            4.3.5- ValueOf(): Retorna um número como um número.	  EX: let x = 123; x.valueOf();  >>Resultado: 123

    4.4- Convertendo Variáveis ​​em Números: Existem 3 métodos JavaScript que podem ser usados ​​para converter uma variável em um número: 
            4.4.1- Number(): Retorna um número convertido de seu argumento.   EX: Number(true);  >>Resultado: 1
            4.4.2- parseFloat(): Analisa seu argumento e retorna um número de ponto flutuante.   EX:  parseFloat("10 anos")  >>Resultado: 10 
            4.4.3- parseInt(): Analisa seu argumento e retorna um número inteiro.   EX:  parseInt("10 anos")  >>Resultado: 10

5- Operadores, atribuição, aritmética e matemática:
    5.1- Operadores: Existem diferentes tipos de operadores JavaScript: Operadores aritméticos, Operadores de atribuição, Operadores de Comparação, Operadores de String, Operadores lógicos, Operadores bit a bit, Operadores Ternários e Operadores de tipo.
        5.1.1- Operadores Aritméticos: + (adição), - (Subtração), *	(Multiplicação), **	(Exponenciação), / (Divisão), %	Módulo (Resto da divisão), ++ (Incremento) e -- (Decremento)
        5.1.2- Operadores de atribuição: =, +=, -=, *=, /=, %= e **=
        5.1.3- Operadores de Comparação: == (igual a), === (valor igual e tipo igual), != (diferente), !==	(valor diferente ou tipo diferente), > (maior que), < (menor que), >= (maior ou igual a), <= (menor ou igual a) e ? (operador ternário)
        5.1.4- Operadores Lógicos: && (E), || (OU) e ! (não)
        5.1.5- Operadores de tipo: typeof (Retorna o tipo de uma variável) e instanceof (Retorna true se um objeto é uma instância de um tipo de objeto)
        5.1.6- Operadores bit a bit: & (AND), | (OR), ~ (NOT), ^ (XOR), << (left shift), >> (right shift) e >>> (unsigned right shift)

    5.2- Operadores de Atribuição:
        5.2.1- Operador = : O operador de atribuição simples atribui um valor a uma variável.   EX: let x = 10;
        5.2.2- Operador += : O operador de atribuição de adição adiciona um valor a uma variável.   EX: let x = 10; x += 5;  >>Resultado: 15
        5.2.3- Operador -= : O operador de atribuição de subtração subtrai um valor de uma variável.   EX: let x = 10; x -= 5;  >>Resultado: 5
        5.2.4- Operador *= : O operador de atribuição de multiplicação multiplica uma variável.   EX: let x = 10; x *= 5;  >>Resultado: 50
        5.2.5- Operador **= : O operador de atribuição de exponenciação eleva uma variável à potência do operando.   EX: let x = 10; x **= 5;  >>Resultado: 100000
        5.2.6- Operador /= : O operador de atribuição de divisão divide uma variável.   EX: let x = 10; x /= 5;  >>Resultado: 2
        5.2.7- Operador %= : O operador de atribuição de resto atribui um resto a uma variável.   EX: let x = 10; x %= 5;  >>Resultado 0
        5.2.8- Operador <<= : O operador de atribuição de deslocamento à esquerda desloca uma variável para a esquerda.   EX: let x = -100; x <<= 5;  >>Resultado: -3200
        5.2.9- Operador >>= : O operador de atribuição de deslocamento à direita desloca uma variável (com sinal).   EX: let x = -100; x >>= 5;  >>Resultado: -4
        5.2.10- Operador &= : O operador de atribuição AND bit a bit faz uma operação AND bit a bit em dois operandos e atribui o resultado à variável.   EX: let x = 10;x &= 5;  >>Resultado: 4
        5.2.11- Operador |= : O operador de atribuição OR bit a bit faz uma operação OR bit a bit em dois operandos e atribui o resultado à variável.   EX: let x = 10;x |= 5;  >>Resultado: 101
        5.2.12- Operador ^= : O operador de atribuição XOR bit a bit executa uma operação XOR bit a bit em dois operandos e atribui o resultado à variável   EX: let x = 10; x ^= 5;  >>Resultado: 97
        5.2.13- Operador &&= : O operador de atribuição lógico AND é usado entre dois valores. Se o primeiro valor for verdadeiro, o segundo valor será atribuído.   EX: let x = 10; x &&= 5;  >>Resultado: 5
        5.2.14- Operador ||= : O operador de atribuição lógico OU é usado entre dois valores. Se o primeiro valor for falso, o segundo valor será atribuído.   EX: let x = undefined; x ||= 5;  >>Resultado: 5
        5.2.15- Operador ??= : O operador de atribuição de coalescência Nullish é usado entre dois valores. Se o primeiro valor for indefinido ou nulo, o segundo valor será atribuído.   EX: let x = 10; x ??= 5;  >>Resultado: 100

    5.3- Operações Aritméticas:
        5.3.1- Adição: O operador de adição (+) adiciona números.   EX: let x = 5; let y = 2; let z = x + y;  >>Resultado: 7
        5.3.2- Subtraindo: O operador de subtração (-) subtrai números.   EX: let x = 5; let y = 2; let z = x - y;  >>Resultado: 3
        5.3.3- multiplicação: O operador de multiplicação (*) multiplica números.  EX: let x = 5; let y = 2; let z = x * y;  >>Resultado: 10
        5.3.4- Divisão: O operador de divisão (/) divide números.   EX: let x = 5; let y = 2; let z = x / y;  >>Resultado: 2.5
        5.3.5- Módulo: O operador de módulo (%) retorna o resto da divisão.   EX: let x = 5; let y = 2; let z = x % y;  >>Resultado: 1
        5.3.6- Incrementando: O operador de incremento (++) incrementa números.   EX: let x = 5; x++; let z = x;  >>Resultado: 6
        5.3.7- Decrementando: O operador de decremento (--) decrementa números.   EX: let x = 5; x--; let z = x;  >>Resultado: 4
        5.3.8- Exponenciação: O operador de exponenciação (**) eleva o primeiro operando à potência do segundo.   EX: let x = 5; let z = x ** 2;  >>Resultado: 25

    5.4- Operadores de Comparação: Operadores de comparação são usados ​​em instruções lógicas para determinar igualdade ou diferença entre variáveis ​​ou valores.
        5.4.1- Igual a: O operador de igualdade (==) compara 2 números.   EX: x=5; x == 8;  >>Resultado: false
        5.4.2- Valor igual e tipo igual: O operador de igualdade (===) compara 2 números e seus tipos.   EX: x=5; x === 5;  >>Resultado: true
        5.4.3- Diferente: O operador de diferença (!=) compara 2 números.   EX: x=5; x != 8;  >>Resultado: true
        5.4.4- Valor diferente e tipo diferença: O operador de diferença (!==) compara 2 números e seus tipos.   EX: x=5; x !== 5;  >>Resultado: false
        5.4.5- Maior que: O operador de maior que (>) compara 2 números.   EX: x=5; x > 8;  >>Resultado: false
        5.4.6- Menor que: O operador de menor que (<) compara 2 números.   EX: x=5; x < 8;  >>Resultado: true
        5.4.7- Maior ou igual a: O operador de maior ou igual (>=) compara 2 números.   EX: x=5; x >= 8;  >>Resultado: false
        5.4.8- Menor ou igual a: O operador de menor ou igual (<=) compara 2 números.   EX: x=5; x <= 8;  >>Resultado: true

    5.5- Operadores lógicos: Os operadores lógicos são usados ​​para determinar a lógica entre variáveis ​​ou valores.
        5.5.1- Operador E: O operador AND (&&) compara 2 números.   EX: x=6; y=3; (x < 10 && y > 1); >>Resultado true
        5.5.2- Operador OU: O operador OR (||) compara 2 números.   EX: x=6; y=3; (x == 5 || y == 5); >>Resultado false
        5.5.3- Operador Não: O operador NOT (!) compara 2 números e retorna o oposto.   EX: x=6; y=3; !(x == y); >>Resultado true

    5.6- Operador Ternário: 
                JavaScript também contém um operador condicional que atribui um valor a uma variável com base em alguma condição. Sintaxe variável = (condição) ? valor1:valor2.   EX: let votação = (idade < 18) ? "Muito Jovem para votar":"Velho o suficiente para votar";  >>Explicando: caso a pessoa tenha menos de 18 anos irá aparecer a mensagem de "Muito jovem para votar", caso contrario aparecerá "Velho o suficiente para votar".

    5.7- Math: O objeto Math permite que você execute tarefas matemáticas em números.
        5.7.1- Math.round(): Math.round(x) retorna o inteiro mais próximo.   EX: Math.round(4.6);  >>Resultado: 5
        5.7.2- Math.ceil(): Math.ceil(x) retorna o valor de x arredondado para cima o número inteiro mais próximo.   EX:  Math.ceil(4.1);  >>Resultado: 5
        5.7.3- Math.floor(): Math.floor(x) retorna o valor de x arredondado para baixo o número inteiro mais próximo.   EX: Math.floor(4.7);  >>Resultado: 4
        5.7.4- Math.trunc(): Math.trunc(x) retorna a parte inteira de x.   EX: Math.trunc(4.7);  >>Resultado: 4
        5.7.5- Math.sign(): Math.sign(x) retorna se x for negativo, nulo ou positivo.   EX: Math.sign(4);  >>Resultado: 1
        5.7.6- Math.pow(): Math.pow(x, y) retorna o valor de x elevado a y.   EX: Math.pow(8,2);  >>Resultado: 64
        5.7.7- Math.sqrt(): Math.sqrt(x) retorna a raiz quadrada de x.   EX: Math.sqrt(64);  >>Resultado: 8
        5.7.8- Math.abs(): Math.abs(x) retorna o valor positivo de x.   EX: Math.abs(-4.7);  >>Resultado: 4.7
        5.7.9- Math.sin(): Math.sin(x) retorna o seno (um valor entre -1 e 1) do ângulo x (dado em radianos).   EX: Math.sin(90);  >>Resultado: 0.8939966636005579
        5.7.10- Math.cos(): Math.cos(x) retorna o cosseno (um valor entre -1 e 1) do ângulo x (dado em radianos).   EX: Math.cos(90);  >>Resultado: -0.4480736161291701
        5.7.11- Math.min(): Math.min() pode ser usado para encontrar o valor mais baixo em uma lista de argumentos.   EX: Math.min(0, 150, 30, 20, -8, -200);  >>Resultado: -200
        5.7.12- Math.max(): Math.max() pode ser usado para encontrar o valor mais alto em uma lista de argumentos.   EX: Math.max(0, 150, 30, 20, -8, -200);  >>Resultado: 150
        5.7.13- Math.random(): Math.random() retorna um número aleatório entre 0 (inclusivo) e 1 (exclusivo).   EX: Math.random();
        5.7.14- Math.log(): Math.log(x) retorna o logaritmo natural de x. O logaritmo natural retorna o tempo necessário para atingir um determinado nível de crescimento.   EX: Math.log2(8);  >>Resultado: 3

    5.8- Precedência: A precedência do operador descreve a ordem na qual as operações são executadas em uma expressão aritmética. A multiplicação (*) e a divisão (/) têm maior precedência do que a adição (+) e a subtração (-).
        5.8.1- Valores de precedência do operador: As expressões entre parênteses são calculadas antes do restante da expressão. A função é executada antes do resultado ser usado no restante da expressão
        5.8.2- Operadores aritméticos: As exponenciações são executadas antes das multiplicações. As multiplicações e divisões são executadas antes das adições e subtrações.
        5.8.3- Resumo: 1- (), 2-[], 3- **, 4- *, 5- /, 6- %, 7- +, 8- -

6- Strings:
    6.1-Strings: 
                Strings são para armazenar e manipular texto. Você pode usar aspas simples ou duplas. Para encontrar o comprimento de uma string use a propriedade interna length. Uma maneira mais segura de quebrar uma string é usar a adição de strings   EX: document.getElementById("demo").innerHTML = "Hello " + "Dolly!";

    6.2- Comprimento de Strings: 
                A propriedade length retorna o comprimento de uma string.   EX: let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; let length = text.length;  >>Resultado: 26

    6.3- Extraindo Partes de Strings: Existem 3 métodos para extrair uma parte de uma string.
        6.3.1- String slice (): slice() extrai uma parte de uma string e retorna a parte extraída em uma nova string. O método leva 2 parâmetros: posição inicial e posição final.   EX: let text = "Apple, Banana, Kiwi"; let part = text.slice(7, 13);  >>Resultado: Banana

        6.3.2- String substring (): substring() é semelhante a slice(). A diferença é que os valores inicial e final menores que 0 são tratados como 0 em substring().   EX: let str = "Apple, Banana, Kiwi"; let part = str.substring(7, 13);  >>Resultado: Banana

        6.3.3- String substr (): substr() é semelhante a slice(). A diferença é que o segundo parâmetro especifica o comprimento da parte extraída.   EX: let str = "Apple, Banana, Kiwi"; let part = str.substr(7, 6);  >>Resultado: Banana
    
    6.4- Substituindo o conteúdo da string: 
        6.4.1- O método replace() substitui um valor especificado por outro valor em uma string. Por padrão, o substitui apenas a primeira correspondência e diferencia maiúsculas de minúsculas. EX: let text = "Visite a Microsoft!"; let newText = text.replace("Microsoft", "W3Schools");  >>Resultado: Visite a W3Schools

        6.4.2- String replaceAll(): O método replaceAll() permite que você especifique uma expressão regular em vez de uma string a ser substituída.   EX: let text = "Eu amo gatos. Os Gatos são muitos fáceis de amar. Os Gatos são muitos populares." text = text.replaceAll("Gatos","Cães"); text = text.replaceAll("gatos","cachorros");  >>Resultado: Eu amo cachorros. Os Cães são muito fáceis de amar. Os Cães são muito populares.

    6.5- Convertendo para Maiúsculas e Minúsculas: 
                Uma string é convertida para letras maiúsculas com toUpperCase(). Uma string é convertida em letras minúsculas com toLowerCase().   EX: let text1 = "Olá, Mundo!"; let text2 = text1.toUpperCase();  >>Resultado: OLÁ, MUNDO!

    6.6- Extraindo caracteres de string:
                String charAt (): O método charAt() retorna o caractere em um índice especificado (posição) em uma string.   EX: let texto = "Olá, Mundo"; let char = text.charAt(0);  >>Resultado: O
    
    6.7- Pesquisa de Strings:
         String indexOf (): O método indexOf() retorna o índice (posição) da primeira ocorrência de uma string em uma string: let texto = "Por favor, localize onde 'localizar' ocorre!"; let index = text.indexOf("localizar");  >>Resultado: 26

    6.8- Modelos de Strings: 
        6.8.1- Sintaxe de Back-Tics: Literais de modelo usam acentos graves (``) em vez de aspas ("") para definir uma string.   EX: let texto = `Olá Mundo!`;
        
        6.8.2- Aspas Dentro de Strings: Com template literals, você pode usar aspas simples e duplas dentro de uma string.   EX: let texto = `Ele costuma ser chamado de "Johnny"`;  >>Resultado: Ele costuma ser chamado de "Johnny"
        
        6.8.3- Interpolação: Os literais de modelo fornecem uma maneira fácil de interpolar variáveis ​​e expressões em strings. O método é chamado de interpolação de string. A sintaxe é: ${...}

        6.8.4- Substituições de variáveis: Os literais de modelo permitem variáveis ​​em strings.   EX: let Nome = "João"; let Sobrenome = "Gomes"; let texto = `Bem-Vindo ${Nome} ${Sobrenome}!`;  >>Resultado: Bem-vindo João Gomes!

7- Arrays (Matrizes): 
        Uma matriz é uma variável especial, que pode conter mais de um valor.   EX: const carros = ["Saab", "Volvo", "BMW"];

    7.1- Acessando elementos da matriz: 
                Você acessa um elemento de array referindo-se ao número do índice. OBS: os índices de matriz começam com 0. [0] é o primeiro elemento. [1] é o segundo elemento.   EX: const carros = ["Saab", "Volvo", "BMW"]; let car = carros[0];  >>Resultado: Saab

    7.2- Acessando o primeiro elemento da matriz:   
                EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"]; let frutas = frutas[0];  >>Resultado: Banana

    7.3- Acessando o último elemento da matriz:  
                EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"]; let frutas = frutas[frutas.length - 1];  >>Resultado: Manga

    7.4- Elementos de matriz em loop: 
                Uma maneira de percorrer um array é usando um for.   EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"]; let fLen = frutas.length; let texto = "<ul>"; for (let i = 0; i < fLen; i++) {  texto += "<li>" + frutas[i] + "</li>";} texto += "</ul>";

    7.5- Método de Matriz: 
        7.5.1- Convertendo um Array em uma String: O método toString() converte uma matriz em uma string de valores de matriz (separados por vírgula).   EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"]; document.getElementById("demo").innerHTML = frutas.toString();  >>Resultado: Banana,Laranja,Maçã,Manga

        7.5.2- Comprimento da Matriz: A propriedade length de uma matriz retorna o comprimento de uma matriz (o número de elementos da matriz).   EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"]; let comp = frutas.length;  >>Resultado: 4

        7.5.3- Array pop(): O método pop() remove o último elemento de uma matriz.   EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"]; fruits.pop()  >>Resultado: Banana,Laranja,Maçã

        7.5.4- Array push(): O método push() adiciona um novo elemento a um array (no final).   EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"]; frutas.push("Kiwi");  >>Resultado: Banana, Laranja, Maçã, Manga, Kiwi

        7.5.5- Array splice(): O método splice() pode ser usado para adicionar novos itens a um array.   EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"];frutas.splice(2, 0, "Limão", "Kiwi");   OBS (O primeiro parâmetro (2) define a posição onde novos elementos devem ser adicionados. O segundo parâmetro (0) define quantos elementos devem ser removidos)  >>Resultado: Banana, Laranja, Limão, Kiwi, Maçã, Manga
    
    7.6- Ordenação de Matriz:
        7.6.1- Ordenando um Array: O método sort() classifica uma matriz em ordem alfabética.   EX: const frutas = ["Banana", "Laranja", "Maçã", "Manga"]; frutas.sort();  >>Resultado: Banana, Laranja, Manga, Maçã

        7.6.2- Usando Math.max() em uma matriz: Você pode usar Math.max.apply para encontrar o número mais alto em uma matriz.

        7.6.3- Usando Math.min() em uma matriz: Você pode usar Math.min.apply para encontrar o menor número em uma matriz.

        7.6.4- Array indexOf(): O método indexOf() procura um array por um valor de elemento e retorna sua posição.   EX: const frutas = ["Maçã", "Laranja", "Banana", "Manga"]; let posição = frutas.indexOf("Maçã") + 1;  >>Resultado: 1 OBS (O primeiro item tem a posição 0, o segundo item tem a posição 1 e assim por diante.)

8- Datas:
    8.1- Criando Objetos de Data: Os objetos de data são criados com o construtor new Date(). Existem 9 maneiras de criar um novo objeto de data:
        8.1.1- JavaScript new date(): new Date() cria um objeto de data com a data e hora atuais.   EX: const d = new Date();

        8.1.2- New date (date string): new Date(date string) cria um objeto de data fixo a partir de uma string de data.   EX: const d = new Date("Outubro 13, 2022 11:15:00");  >>Resultado: Seg, 13 de outubro de 2022 11:15:00 GMT-0300 (Horário Padrão de Brasília)

        8.1.3- New date (ano, mês, ...): new Date(year, month, ...) cria um objeto de data com data e hora com 7 números especificando ano, mês, dia, hora, minuto, segundo e milissegundo (nessa ordem).   EX: const d = new Date(2022, 11, 24, 10, 35, 30, 0); >>Resultado: Seg, 24 de dezembro de 2022 10:35:30 GMT-0200 (Horário de Verão de Brasília)   OBS: JavaScript conta meses de 0 a 11 (Janeiro = 0 e Dezembro = 11)

        8.1.4- Formato legível de Data: O método toDateString() converte uma data em um formato mais legível.   EX: const d = new Date(); d.toDateString();

    8.2- Formatos de Data: Existem geralmente 3 tipos de formatos de entrada de data JavaScript: Data ISO, data curta e data longa
        8.2.1- Datas ISO: ISO 8601 é o padrão internacional para a representação de datas e horas. A sintaxe ISO 8601 (AAAA-MM-DD) também é o formato de data JavaScript preferido.   EX: const d = new Date("2015-03-24");  >>Resultado: Terça-feira, 24 de março de 2015 21:00:00 GMT-0300 (Horário Padrão de Brasília)

        8.2.2- Datas curtas: Datas curtas são escritas com uma sintaxe "MM/DD/AAAA".   EX: const d = new Date("03/25/2015"); >>Resultado: Quarta-feira, 25 de março de 2015 00:00:00 GMT-0300 (Horário Padrão de Brasília)

        8.2.3- Datas longas: Datas longas geralmente são escritas com uma sintaxe "MMM DD YYYY".   EX: const d = new Date("Mar 25 2015");  >>Resultado: Quarta-feira, 25 de março de 2015 00:00:00 GMT-0300 (Horário Padrão de Brasília)

    8.2- Métodos de obtenção de data: 
        8.2.1- getFullYear(): O método getFullYear() retorna o ano atual do sistema.   EX: const d = new Date(); d.getFullYear();  >>Resultado: 2023(no meu caso)

        8.2.2- getMonth(): O método getMonth() retorna o mês atual do sistema com um número entre (0-11).  OBS: Em JavaScript, janeiro é o mês número 0, fevereiro é o número 1 e  dezembro é o mês número 11.   EX: const d = new Date(); d.getMonth() + 1;  >>Resultado: 05 (no meu caso)

        8.2.3- getDate(): O método getDate() retorna o dia atual do sistema com um número (1-31).   EX: const d = new Date(); d.getDate();  >>Resultado: 14 (no meu caso)

        8.2.4- getHours(): O método getHours() retorna a hora atual do sistema com um número (0-23).   EX: const d = new Date(); d.getHours(); >>Resultado: 12 (no meu caso)

        8.2.5- getMinutes(): O método getMinutes() retorna os minutos atual do sistema com um número (0-59).   EX: const d = new Date(); d.getMinutes();  >>Resultado: 35 (no meu caso)

        8.2.6- getSeconds(): O método getSeconds() retorna os segundos atual do sistema com um número (0-59).   EX: const d = new Date(); d.getSeconds(); >>Resultado: 14 (no meu caso)

        8.2.7- getDay(): O método getDay() retorna o dia da semana atual do sistema com um número (0-6). OBS: Em JavaScript, o primeiro dia da semana (dia 0) é domingo.   EX: const d = new Date(); d.getDay(); >>Resultado 1 (segunda no meu caso)

9- Eventos:
        Eventos HTML são "coisas" que acontecem com elementos HTML. Quando o JavaScript é usado em páginas HTML, o JavaScript pode "reagir" a esses eventos.
        9.1- Eventos HTML Comuns: 
                onchange (Um elemento HTML foi alterado), onclick (O usuário clica em um elemento HTML), onmouseover (O usuário move o mouse sobre um elemento HTML), onmouseout (O usuário move o mouse para longe de um elemento HTML), onkeydown	(O usuário pressiona uma tecla do teclado) e onload (O navegador terminou de carregar a página). Este tópico será abordado em DOM

10- Declarações condicionais: As instruções condicionais são usadas para executar diferentes ações com base em diferentes condições.
    10.1- if: Use a instrução if para especificar um bloco de código JavaScript a ser executado se uma condição for verdadeira. Sintaxe: if(condição)  {  bloco de instrução  }   EX: if (hora < 18) {
                                        "Bom Dia";  
                                        }  >>Explicando: Caso a hora for menor que 18 horas aparecerá a mensagem "Bom dia"

    10.2-  else: Use a instrução else para especificar um bloco de código a ser executado se a condição for falsa. Sintaxe: if (condição)  { bloco de instrução  }else  { bloco de instrução  }   EX: if (hora < 18) { 
                                                        "Bom Dia";  
                                                        } else {
                                                        "Boa Noite";
                                                        }  >>Explicando: Caso a hora for menor que 18 horas aparecerá a mensagem "Bom dia" caso for maior aparecerá "Boa Noite"

    10.3- else if: Use a instrução else if para especificar uma nova condição se a primeira condição for falsa. Sintaxe: if (condição1)  {executa, se a condição 1 for verdadeira  }else if (condição2)  {executa, se a condição1 for falsa e a condição2 for verdadeira  }else {executa, se a condição1 e condição2 forem falsas }   EX: if (hora < 12) {
                        "Bom dia";
                        } else if (hora < 18) {
                        "Boa Tarde";
                        } else {
                        "Boa noite";
                        }  >>Explicando: Caso a hora for menor que 12 horas aparecerá a mensagem "Bom dia" caso for maior aparecerá "Boa Tarde", e se for um número maior, "Boa Noite"

    10.4- Switch Case: A instrução switch é usada para executar diferentes ações com base em diferentes condições. Sintaxe: switch(expressão) {   case x:  bloco de instrução  break;  case y:  bloco de instrução  break;  default: bloco de instrução  }   
                        EX: switch (new Date().getDay()) {
                                case 0:
                                dia = "Domingo";
                                break;
                                case 1:
                                dia = "Segunda-Feira";
                                break;
                                case 2:
                                dia = "Terça-Feira";
                                break;
                                case 3:
                                dia = "Quarta-Feira";
                                break;
                                case 4:
                                dia = "Quinta-Feira";
                                break;
                                case 5:
                                dia = "Sexta-Feira";
                                break;
                                case 6:
                                dia = "Sábado";
                                default:
                                dia = "Ansioso para o fim de semana";
                                }  >>Explicando: Este exemplo usa o número do dia da semana atual do sistema para calcular o nome do dia da semana.

11- Loops: Os loops podem executar um bloco de código várias vezes.
    11.1- O Loop For : A instrução for(para) cria um loop com 3 expressões opcionais. Sintaxe: for (expressão 1; expressão 2; expressão 3) {  Bloco de execução  }
            EX: for (let i = 0; i < 5; i++) {
                    text += "O número é " + i + "<br>";
                }  >>Explicando: A expressão 1 define uma variável antes do início do loop (deixe i = 0). A expressão 2 define a condição para a execução do loop (i deve ser menor que 5). A expressão 3 aumenta um valor (i++) cada vez que o bloco de código no loop é executado.

    11.2- O Loop For In: A instrução for in percorre as propriedades de um objeto. Sintaxe: for (chave in objeto) {  Bloco de execução  }
            EX: const pessoa = {Nome:"João", Sobrenome:"Gomes", idade:25};
                let text = "";
                for (let x in pessoa) {
                text += pessoa[x];
                }  >>Explicando: O loop for in itera sobre um objeto no caso (pessoa). Cada iteração retorna uma chave (x). A chave é usada para acessar o valor da chave. O valor da chave é person[x]

    11.3- O Loop For Of: A instrução JavaScript for of percorre os valores de um objeto iterável. Sintaxe: for (variável of iterable) {  Bloco de execução  }
            EX: const carros = ["BMW", "Volvo", "Mini"];
            let text = "";
            for (let x of carros) {
            text += x;
            }
        
    11.4- O Loop While: O loop while(enquanto) percorre um bloco de código, desde que uma condição especificada seja verdadeira. Sintaxe: while (condição) {  Bloco de execução  }  EX: while (i < 10) {
                        text += "O número é " + i;
                        i++;
                    }  >>Explicando: No exemplo anterior, o código no loop será executado repetidamente, desde que uma variável (i) seja menor que 10.

    11.5- O Loop do while: é uma variante do loop while. Este loop executará o bloco de código uma vez, antes de verificar se a condição é verdadeira, então repetirá o loop enquanto a condição for verdadeira. Sintaxe: do {  Bloco de execução  }  while (condição);
            EX: do {
                    text += "O número é " + i;
                    i++;
                }
                while (i < 10);  >>Explicando: O exemplo anterior usa um loop do while. O loop sempre será executado pelo menos uma vez, mesmo que a condição seja      falsa, pois o bloco de código é executado antes da condição ser testada:

12- Mapas e Conjuntos: 
    12.1- Mapas: Um mapa contém pares chave-valor onde as chaves podem ser qualquer tipo de dados. Um mapa lembra a ordem de inserção original das chaves.      
        12.1.1- Como criar um mapa: Você pode criar um Mapa, Passando um Array para new Map() ou Crie um mapa e use Map.set()
        12.1.2- O método new Map(): Você pode criar um Map passando um Array para o construtor new Map().   EX: const frutas = new Map([  ["Maçã", 500],  ["Bananas", 300],  ["Laranjas", 200]  ]);
        12.1.3- O método set(): Você pode adicionar elementos a um mapa com o método set().   EX: frutas.set("Laranjas", 200);
        12.1.4- O método get(): O método get() obtém o valor de uma chave em um Map.   EX: frutas.get("Maçã");  >>Resultado: 500
        12.1.5- A propriedade de tamanho: A propriedade size retorna o número de elementos em um Mapa.   EX: frutas.size;  >>Resultado: 3
        12.1.6- O método delete(): O método delete() remove um elemento Map.   EX: frutas.delete("Maçã");
        12.1.7- O método has(): O método has() retorna verdadeiro se uma chave existir em um Mapa.   EX: frutas.has("Maçã");  >>Resultado: true
        12.1.8- O método entries(): O método entries() retorna um objeto iterador com a [chave, valores] em um Mapa.

    12.2- Conjuntos: Um Conjunto JavaScript é uma coleção de valores únicos. Cada valor só pode ocorrer uma vez em um Conjunto.
        12.2.1- Como criar um conjunto: Você pode criar um Conjunto, Passando um Array para new Set() ou Crie um novo conjunto e use add() para adicionar valores ou Crie um novo conjunto e use add() para adicionar variáveis
        12.2.2- O método new Set(): Passe um Array para o construtor new Set().   EX: const letras = new Set(["a","b","c"]);
        12.2.3- O método add(): Adiciona novos elementos a um Conjunto.   EX: letters.add("d");  >>Resultado: a,b,c,d

13- Typeof e Conversão de Tipos:
    13.1- O Operador Typeof: Você pode usar o operador typeof para localizar o tipo de dados de uma variável JavaScript.
        13.1.1- Dados Primitivos: Um valor de dados primitivo é um único valor de dados simples sem propriedades e métodos adicionais. O operador typeof pode retornar um destes tipos primitivos: string, number, boolean e undefined.   EX: typeof "João"  >>Resultado: "string", typeof 3.14  >>Resultado: "number", typeof true >>Resultado: "boolean", typeof false  >>Resultado: "boolean", typeof x >>Resultado: "undefined"

        13.1.2- Dados Complexos: O operador typeof pode retornar um dos dois tipos complexos: function e object. O operador typeof retorna "objeto" para objetos, matrizes e nulo. O operador typeof não retorna "objeto" para funções.   EX: typeof {nome:'João', idade:34}  >>Resultado: "object", typeof [1,2,3,4]  >>Resultado: "object", typeof null  >>Resultado: "object", typeof function myFunc(){}  >>Resultado: "function"
        
        13.1.3- Undefined: Em JavaScript, uma variável sem valor tem o valor undefined. O tipo também é undefined.   EX: let carro;

    13.2- Convertendo Tipos:
        13.2.1- Convertendo Strings em Números: O método global Number() converte uma variável (ou um valor) em um número. Uma string numérica (como "3.14") é convertida em um número (como 3.14). Uma string vazia (como "") é convertida em 0. Uma string não numérica (como "João") é convertida em NaN(não é um número).

        13.2.2- Convertendo Números em Strings: O método global String() pode converter números em strings. O método toString() faz o mesmo. Pode ser usado em qualquer tipo de número, literal, variável ou expressão.   EX: String(100 + 23)  >>Resultado: 123 OU EX2: String(123)  >>Resultado: 123

        13.2.3- Convertendo Booleanos em Números: O método global Number() também pode converter booleanos em números.   EX: Number(false)  >>Resultado: 0   EX2: Number(true)  >>Resultado: 1

14- Escopo:
    14.1- Escopo: O escopo determina a acessibilidade (visibilidade) das variáveis. Em JavaScript tem 3 tipos de escopo: Escopo de bloco, Escopo de função e Escopo global.
        14.1.1- Escopo de bloco: Antes do ES6 (2015), o JavaScript tinha apenas escopo global e escopo de função. O ES6 introduziu duas novas palavras-chave importantes do JavaScript: let e const. Essas duas palavras-chave fornecem escopo de bloco em JavaScript. Variáveis ​​declaradas dentro de um bloco { } não podem ser acessadas de fora do bloco.   EX: {  let x = 2;  }

        14.1.2- Escopo local: As variáveis ​​declaradas dentro de uma função JavaScript tornam-se LOCAL para a função.   EX: function myFunction() {  let NomeCarro = "Volvo"; [aqui pode usar a função NomeCarro] }

        14.1.3- Escopo de função: Em JavaScript tem escopo de função: cada função cria um novo escopo. As variáveis ​​definidas dentro de uma função não são acessíveis (visíveis) de fora da função. Variáveis ​​declaradas com var, let e const são bastante semelhantes quando declaradas dentro de uma função.

        14.1.4- Variáveis ​​globais: Uma variável declarada fora de uma função torna-se GLOBAL.   EX: let NomeCarro = "Volvo";

15- Diversos:
    15.1- Aleatório:
        15.1.1- Math.random(): Math.random() retorna um número aleatório entre 0 e 1.
        15.1.2- inteiros aleatórios: Math.random() usado com Math.floor() pode ser usado para retornar números inteiros aleatórios.   EX: Math.floor(Math.random() * 100 + 1);  >>Explicando: Retorna um número aleatório de 0 até 100

    15.2- JSON (Java Script Object Notation): JSON é um formato para armazenar e transportar dados. JSON é frequentemente usado quando os dados são enviados de um servidor para uma página da web.
        15.2.1- Regras de sintaxe JSON: Os dados estão em pares nome/valor, Os dados são separados por vírgulas, Chaves seguram objetos e Os colchetes contêm matrizes.
        15.2.2- Dados JSON - um nome e um valor: Os dados JSON são gravados como pares de nome/valor, assim como as propriedades do objeto JavaScript. Um par nome/valor consiste em um nome de campo (entre aspas duplas), seguido por dois pontos, seguido por um valor.   EX: "firstName":"John"
        15.2.3- Objetos JSON: Os objetos JSON são escritos entre chaves. Assim como em JavaScript, os objetos podem conter vários pares nome/valor.   EX:{"firstName":"John", "lastName":"Doe"}
        16.2.4- Matrizes JSON: As matrizes JSON são escritas entre colchetes. Assim como em JavaScript, um array pode conter objetos.
                EX:"Funcionários":[
                        {"Nome":"João", "Sobrenome":"Gomes"},
                        {"Nome":"Anna", "Sobrenome":"Silva"},
                        {"Nome":"Pedro", "Sobrenome":"Santos"}
                    ]  >>Explicando: No exemplo anterior, o objeto "funcionários" é um array. Ele contém três objetos. Cada objeto é um registro de uma pessoa (com um nome e um sobrenome).

16- Versões: 
        O JavaScript foi inventado por Brendan Eich em 1995 e tornou-se um padrão ECMA em 1997. ECMAScript é o nome oficial da linguagem. As versões do ECMAScript foram abreviadas para ES1, ES2, ES3, ES5 e ES6. Desde 2016, as versões são nomeadas por ano (ECMAScript 2016, 2017, 2018, 2019, 2020).

17- Objetos: Em JavaScript, os objetos são rei. Se você entende de objetos, você entende de JavaScript.
    17.1- Objetos: Em JavaScript, quase "tudo" é um objeto. Um valor primitivo é um valor que não tem propriedades ou métodos. 3,14 é um valor primitivo. Um tipo de dados primitivo são dados que possuem um valor primitivo. JavaScript define 7 tipos de tipos de dados primitivos: string, number, boolean, null, undefined, symbol e bigint. Os valores primitivos são imutáveis ​​(são codificados e não podem ser alterados). Os objetos também são variáveis. Mas os objetos podem conter muitos valores. Você define (e cria) um objeto JavaScript com um objeto literal:   EX: const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
    
    17.2- Propriedades do Objeto: As propriedades são os valores associados a um objeto JavaScript. Um objeto JavaScript é uma coleção de propriedades não ordenadas. As propriedades geralmente podem ser alteradas, adicionadas e excluídas, mas algumas são somente leitura. Sintaxe: objectName.propriedade ou objectName["propriedade"].   EX: pessoa.idade ou pessoa["idade"]

    17.3- Métodos de objeto JavaScript: Em JavaScript, a palavra-chave this se refere a um objeto. A palavra-chave this refere-se a diferentes objetos dependendo de como é usada. Você acessa um método de objeto com a seguinte sintaxe: objectName.methodName()   EX: const person = {  Nome: "João",  Sobrenome: "Gomes",  NomeCompleto : function() {  return this.Nome + " " + this.Sobrenome;  }  };

18- Funções: 
        As funções JavaScript são definidas com a palavra-chave function. Sintaxe: function NomeDaFunção(parâmetro) { [bloco de execução] }   EX: const x = function (a, b) {return a * b};  let z = x(4, 3);  >>Resultado: 12 . O código dentro de um JavaScript function será executado quando "algo" o invocar.

19- Classes: 
        Sintaxe: class ClassName {  constructor() { ... }  }    EX: class Carro {  constructor(nome, ano) {  this.nome = nome;  this.ano = ano;  }  }

20- Async:
    20.1- Callbacks: Um callback é uma função passada como um argumento para outra função. Esta técnica permite que uma função chame outra função.   EX: function Primeiro() {  player("Olá");  }  function Segundo() {  player("Adeus");  }  Primeiro();  Segundo();  >>Resultado: Adeus

21- DOM(Modelo de objeto de documento) : Com o DOM, o JavaScript pode acessar e alterar todos os elementos de um documento HTML.
    21.1- Métodos DOM: Os métodos DOM são ações que você pode executar (em elementos HTML). No DOM, todos os elementos HTML são definidos como objetos.   EX: document.getElementById("Exemplo").innerHTML = "Olá Mundo!";  OBS: A propriedade innerHTML pode ser usada para obter ou alterar qualquer elemento HTML.
    
    21.2- Documento DOM: O objeto de documento DOM é o proprietário de todos os outros objetos em sua página da web.
        21.2.1- O objeto de documento DOM: O objeto de documento representa sua página da web. Se você quiser acessar qualquer elemento em uma página HTML, sempre comece acessando o objeto do documento. Abaixo estão alguns exemplos de como você pode usar o objeto de documento para acessar e manipular HTML.
        
        21.2.2- Adicionando e Excluindo Elementos: document.createElement(element)	[Cria um elemento HTML], document.removeChild(elemento) [Remove um elemento HTML], document.appendChild(elemento) [Adiciona um elemento HTML], document.replaceChild(novo, antigo)	[Substituir um elemento HTML] e document.write(texto) [Escreve no fluxo de saída do HTML].

        21.2.3- Adicionando manipuladores de eventos: document.getElementById(id).onclick = function(){code} [Adicionando o código do manipulador de eventos a um evento onclick]

    21.3- Elementos DOM: Encontrando Elementos HTML, Existem várias maneiras de fazer isso: Encontrando elementos HTML por id, Encontrando elementos HTML por nome de tag, Encontrando elementos HTML por nome de classe, Encontrando elementos HTML por seletores CSS.
        21.3.1- Encontrando Elemento HTML por Id: A maneira mais fácil de encontrar um elemento HTML no DOM é usando o id do elemento.   EX: const element = document.getElementById("intro");  >>Explicando: Este exemplo encontra o elemento com id="intro":

        21.3.2- Encontrando elementos HTML por nome de tag:   EX: const element = document.getElementsByTagName("p");  >>Explicando: Este exemplo localiza todos os elementos <p> 

        21.3.3- Encontrando Elementos HTML por Nome de Classe: Se você deseja localizar todos os elementos HTML com o mesmo nome de classe, use getElementsByClassName().   EX: const x = document.getElementsByClassName("intro");  >>Explicando: Este exemplo retorna uma lista de todos os elementos com class="intro".

        21.3.4- Encontrando Elementos HTML por Seletores CSS: Se você quiser encontrar todos os elementos HTML que correspondem a um seletor CSS especificado (id, nomes de classes, tipos, atributos, valores de atributos, etc.), use o querySelectorAll()método.   EX: const x = document.querySelectorAll("p.intro");  >>Explicando: Este exemplo retorna uma lista de todos os elementos <p> com class="intro".

    21.4- Alterando HTML: O DOM permite que o JavaScript altere o conteúdo dos elementos HTML.
        21.4.1- Alterando o Conteúdo HTML: A maneira mais fácil de modificar o conteúdo de um elemento HTML é usando a propriedade innerHTML.Para alterar o conteúdo de um elemento HTML, use esta sintaxe: document.getElementById(id).innerHTML = new HTML   EX: document.getElementById("p1").innerHTML = "Novo título!";  >>Explicando: JavaScript mudou o texto de p1 para "Novo título".

        21.4.2- Alterando o valor de um atributo: Para alterar o valor de um atributo HTML, use esta sintaxe: document.getElementById(id).attribute = new value   EX: document.getElementById("MinhaImagem").src = "landscape.jpg"; >>Explicando: JavaScript mudou a imagem de MinhaImagem para landscape.jpg.

        21.4.3- document.write(): Em JavaScript, document.write() pode ser usado para gravar diretamente no fluxo de saída HTML.   EX: document.write("Eu amo JavaScript");

    21.5- Formulários JavaScript:
        21.5.1- Validação de Formulário JavaScript: A validação do formulário HTML pode ser feita por JavaScript.   EX: function validaForm() {  let x = document.forms["MeuForm"]["fname"].value;  if (x == "") {  alert("Nome deve ser preenchido");  return false;  }  }

        21.5.2- JavaScript pode validar entrada numérica: O JavaScript é frequentemente usado para validar entradas numéricas.   EX: function MinhaFunc() {  let x = document.getElementById("Num").value;  let text;  if (isNaN(x) || x < 1 || x > 10) {  text = "Entrada inválida";  } else {  text = "Entrada OK";  }  document.getElementById("demo").innerHTML = text;  }

    21.6- Alterando CSS: O DOM permite que o JavaScript altere o estilo dos elementos HTML.
        21.6.1- Mudando o Estilo HTML: Para alterar o estilo de um elemento HTML, use esta sintaxe: document.getElementById(id).style.property = new style   EX: document.getElementById("p2").style.color = "blue";  >>Explicando: Este exemplo define a cor azul para o texto em p2

    21.7- Eventos DOM: O DOM permite que o JavaScript reaja a eventos HTML:
        21.7.1- Reagindo a Eventos: Um JavaScript pode ser executado quando ocorre um evento, como quando um usuário clica em um elemento HTML. Para executar o código quando um usuário clica em um elemento, adicione o código JavaScript a um atributo de evento HTML: onclick=JavaScript. Exemplos de eventos HTML: Quando um usuário clica no mouse, Quando uma página da web é carregada, Quando uma imagem foi carregada, Quando o mouse passa sobre um elemento, Quando um campo de entrada é alterado, Quando um formulário HTML é enviado e Quando um usuário pressiona uma tecla.   EX: <h1 onclick="this.innerHTML = 'Ooops!'">Clique neste texto!</h1>

        21.7.2- Os eventos onload e onunload: Os eventos onload e onunload são acionados quando o usuário entra ou sai da página. O evento onload pode ser usado para verificar o tipo e a versão do navegador do visitante e carregar a versão adequada da página da Web com base nas informações. Os eventos onload e onunload podem ser usados ​​para lidar com cookies.

        21.7.3- O evento onchange: O evento onchange geralmente é usado em combinação com a validação de campos de entrada. <input type="text" id="fname" onchange="upperCase()">  >>Explicando: A upperCase() função será chamada quando um usuário alterar o conteúdo de um campo de entrada.

        21.7.4- Os eventos onmouseover e onmouseout: Os eventos onmouseover e onmouseout podem ser usados ​​para acionar uma função quando o usuário passa o mouse sobre ou fora de um elemento HTML respectivamente.

        21.7.5- Os eventos onmousedown, onmouseup e onclick: Os eventos onmousedown, onmouseup e onclick são partes de um clique do mouse. Primeiro, quando um botão do mouse de click é pressionado, o evento onmousedown é acionado. Depois, quando o botão do mouse é liberado, o evento onmouseup é acionado. Finalmente, quando o clique do mouse é concluído, o evento onclick é acionado.

    21.8- Navegação DOM:
        21.8.1- Nós DOM: De acordo com o padrão W3C HTML DOM, tudo em um documento HTML é um nó. O documento inteiro é um nó de documento. Cada elemento HTML é um nó de elemento. O texto dentro dos elementos HTML são nós de texto. Todos os comentários são nós de comentários.

        21.8.2- Navegando entre nós: Você pode usar as seguintes propriedades de nó para navegar entre os nós com JavaScript: parentNode, childNodes[nodenumber], firstChild, lastChild, nextSibling e previousSibling.   EX: document.getElementById("id02").innerHTML = document.getElementById("id01").firstChild.nodeValue;

    21.9- Coleções DOM: 
        21.9.1- O objeto HTMLCollection: O método getElementsByTagName() retorna um objeto HTMLCollection. Um objeto HTMLCollection é uma lista semelhante a uma matriz (coleção) de elementos HTML.   EX: myCollection[1]

        21.9.2- Comprimento da coleção: A propriedade length define o número de elementos em um HTMLCollection.   EX: myCollection.length

22- BOM do navegador: O Browser Object Model (BOM) permite que o JavaScript "fale com" o navegador.
    22.1- Janela: O window objeto é suportado por todos os navegadores. Representa a janela do navegador.Todos os objetos, funções e variáveis ​​JavaScript globais tornam-se automaticamente membros do objeto window.   EX: window.document.getElementById("header");
        22.1.1- Tamanho da janela: Duas propriedades podem ser usadas para determinar o tamanho da janela do navegador. Ambas as propriedades retornam os tamanhos em pixels: window.innerHeight [a altura interna da janela do navegador (em pixels)] e window.innerWidth [a largura interna da janela do navegador (em pixels)]
        22.1.2- Outros métodos de janela: window.open() [abrir uma nova janela], window.close() [fechar a janela atual], window.moveTo() [mover a janela atual] e window.resizeTo() [redimensionar a janela atual]

    22.2- Tela: O objeto window.screen contém informações sobre a tela do usuário.
        22.2.1- Largura da Tela da Janela: A propriedade screen.width retorna a largura da tela do visitante em pixels.   EX: document.getElementById("demo").innerHTML = "A largura da tela é: " + screen.width;

        22.2.2- Altura da Tela da Janela: A propriedade screen.height retorna a altura da tela do visitante em pixels.   Ex: document.getElementById("demo").innerHTML = "A altura da tela é: " + screen.height;

    22.3- Localização: O window.location objeto pode ser usado para obter o endereço da página atual (URL) e redirecionar o navegador para uma nova página.
        22.3.1- Localização da Janela Href: A propriedade window.location.href retorna a URL da página atual.   EX: document.getElementById("demo").innerHTML ="A URL completa desta página é: " + window.location.href;

        22.3.2- Nome do Host da Localização da Janela: A propriedade window.location.hostname retorna o nome do host da internet (da página atual).   EX: document.getElementById("demo").innerHTML = "O nome do host da página é: " + window.location.hostname;

        22.3.3- Nome do Caminho da Localização da Janela: A propriedade window.location.pathname retorna o nome do caminho da página atual.   EX: document.getElementById("demo").innerHTML = "O caminho da página é " + window.location.pathname;

        22.3.4- Protocolo de Localização da Janela: A propriedade window.location.protocol retorna o protocolo da web da página.   EX: document.getElementById("demo").innerHTML = "O protocolo da página é: " + window.location.protocol;

    22.4- Histórico: O window.history objeto contém o histórico do navegador.
        22.4.1- Janela Histórico Voltar: O método history.back() carrega a URL anterior na lista de histórico. Isso é o mesmo que clicar no botão Voltar no navegador.

        22.4.2- Janela Avançar Histórico: O método history.forward() carrega a próxima URL na lista de histórico. Isso é o mesmo que clicar no botão Avançar no navegador.

    22.5- Alerta Pop-up:
        22.5.1- Caixa de Alerta: Uma caixa de alerta é frequentemente usada se você quiser garantir que as informações cheguem ao usuário. Quando uma caixa de alerta aparecer, o usuário terá que clicar em "OK" para prosseguir. Sintaxe: window.alert("Texto Aqui");

        22.5.2- caixa de confirmação: Uma caixa de confirmação geralmente é usada se você deseja que o usuário verifique ou aceite algo. Quando uma caixa de confirmação aparecer, o usuário terá que clicar em "OK" ou "Cancelar" para prosseguir. Se o usuário clicar em "OK", a caixa retornará true . Se o usuário clicar em "Cancelar", a caixa retornará false. Sintaxe: window.confirm("Texto Aqui");

        22.5.3- Caixa de Aviso: Uma caixa de prompt geralmente é usada se você deseja que o usuário insira um valor antes de entrar em uma página. Quando uma caixa de prompt aparecer, o usuário terá que clicar em "OK" ou "Cancelar" para continuar depois de inserir um valor de entrada. Se o usuário clicar em "OK", a caixa retornará o valor de entrada. Se o usuário clicar em "Cancelar" a caixa retornará null. Sintaxe: window.prompt("Texto Aqui","Texto Padrão");

    22.6- Cronometragem:
        22.6.1- O método setTimeout(): O método window.setTimeout() Executa uma função, após aguardar um número especificado de milissegundos. Sintaxe: window.setTimeout(function, milliseconds);

        22.6.2- O método setInterval(): O método setInterval() repete uma determinada função em cada intervalo de tempo determinado. Sintaxe: window.setInterval(function, milliseconds);

    22.7- Cookies: Os cookies permitem armazenar informações do usuário em páginas da web.
        22.7.1- Criar um Cookie com JavaScript: O JavaScript pode criar, ler e excluir cookies com a document.cookie propriedade. Com JavaScript, um cookie pode ser criado assim: document.cookie = "username=John Doe";

        22.7.2- Ler um Cookie com JavaScript: Com JavaScript, os cookies podem ser lidos assim: let x = document.cookie;

        22.7.3- Alterar um cookie com JavaScript: Com JavaScript, você pode alterar um cookie da mesma forma que o cria

        22.7.4- Excluir um Cookie com JavaScript: Excluir um cookie é muito simples. Você não precisa especificar um valor de cookie ao excluir um cookie. Basta definir o parâmetro expires para uma data passada: document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC;

23- APIs da Web:
    23.1- O que é WebAPI?: API significa Interface de Programação de Aplicativos. Uma API da Web é uma interface de programação de aplicativos para a Web. Uma API de navegador pode estender a funcionalidade de um navegador da web. Uma API de servidor pode estender a funcionalidade de um servidor web.

24- AJAX: AJAX(Asynchronous JavaScript And XML.) é o sonho de um desenvolvedor, porque você pode: Ler dados de um servidor da Web [após o carregamento da página], Atualizar uma página da web sem recarregar a página e Enviar dados para um servidor web [em segundo plano].
    24.1- O Objeto XMLHttpRequest: Todos os navegadores modernos suportam o objeto XMLHttpRequest. O objeto XMLHttpRequest pode ser usado para trocar dados com um servidor web nos bastidores. Isso significa que é possível atualizar partes de uma página da Web sem recarregar a página inteira.

        24.1.1- Crie um objeto XMLHttpRequest:Todos os navegadores modernos (Chrome, Firefox, IE, Edge, Safari, Opera) possuem um objeto embutido. Sintaxe para criar um objeto XMLHttpRequest: variable = new XMLHttpRequest();

        24.1.2- A propriedade onload: Com o objeto XMLHttpRequest você pode definir uma função de callback a ser executada quando a requisição receber uma resposta. A função é definida na propriedade onload do objeto XMLHttpRequest.

    24.2- Solicitação AJAX: O objeto XMLHttpRequest é usado para solicitar dados de um servidor. 
        24.2.1- Enviar uma solicitação para um servidor: Para enviar uma solicitação a um servidor, usamos os métodos open() e send() do objeto XMLHttpRequest. Sintaxe: xhttp.open("GET", [url], true); xhttp.send();

    24.3- Resposta do servidor AJAX:
        24.3.1- A propriedade responseText: A propriedade responseText retorna a resposta do servidor como uma string JavaScript e você pode usá-la adequadamente.   EX: document.getElementById("demo").innerHTML = xhttp.responseText;

        24.3.2- A propriedade responseXML: O objeto XMLHttpRequest possui um analisador XML integrado. A propriedade responseXML retorna a resposta do servidor como um objeto XML DOM.

    24.4- Arquivo XML AJAX: AJAX pode ser usado para comunicação interativa com um arquivo XML.   EX: xhttp.open("GET", "cd_catalog.xml"); xhttp.send();

    24.5- AJAX PHP: AJAX é usado para criar aplicativos mais interativos.   EX: xmlhttp.open("GET", "gethint.php?q=" + str); xmlhttp.send();

    24.6- AJAX ASP: AJAX é usado para criar aplicativos mais interativos.   EX: xhttp.open("GET", "gethint.asp?q="+str); xhttp.send();

    24.7- Banco de Dados AJAX:  AJAX pode ser usado para comunicação interativa com um banco de dados.

25- JSON: JSON significa Java Script Object Notation. JSON é um formato de texto para armazenar e transportar dados. O tipo de arquivo para arquivos JSON é ".json"

    25.1- Sintaxe JSON: A sintaxe JSON é derivada da sintaxe de notação de objeto JavaScript: Os dados estão em pares nome/valor, Os dados são separados por vírgulas, Chaves seguram objetos, Os colchetes contêm matrizes. Sintaxe: {nome:valor}   EX: {"nome":"João"}

    25.2- Tipos de dados JSON:
        25.2.1- Strings JSON: Strings em JSON devem ser escritas entre aspas duplas.  EX: {"nome":"João"}
        
        25.2.2- Números JSON: Os números em JSON devem ser um número inteiro ou um ponto flutuante.   EX: {"idade":30}
        
        25.2.3- Objetos JSON: Valores em JSON podem ser objetos.   EX: {  "Funcionário":{"nome":"João", "idade":30, "cidade":"São Paulo"}  }
        
        25.2.4- Matrizes JSON: Os valores em JSON podem ser matrizes.   EX: {  "Funcionários":["João", "Anna", "Pedro"]  }

    25.3- Parse JSON: Um uso comum de JSON é trocar dados de/para um servidor web. Ao receber dados de um servidor web, os dados são sempre uma string. Analise os dados com JSON.parse(), e os dados se tornarão um objeto JavaScript.

    25.4- Stringify JSON: Um uso comum de JSON é trocar dados de/para um servidor web. Ao enviar dados para um servidor web, os dados devem ser uma string. Converta um objeto JavaScript em uma string com JSON.stringify().

    25.5- JSON PHP: Um uso comum de JSON é ler dados de um servidor da web e exibir os dados em uma página da web. PHP tem algumas funções internas para lidar com JSON. Objetos em PHP podem ser convertidos em JSON usando a função PHP json_encode()

    25.6- JSON HTML: JSON pode ser facilmente traduzido para JavaScript. JavaScript pode ser usado para fazer HTML em suas páginas da web.

26- JS x JQuery:
    26.1- Seletores JQuery:
        26.1.1- Encontrando Elemento HTML por Id: Retorne o elemento com id="id01".   EX: myElement = $("#id01");

        26.1.2- Encontrando elementos HTML por nome de tag: Retorne todos os elementos <p>.   EX: myElements = $("p");

        26.1.3- Encontrando Elementos HTML por Nome de Classe: Retorne todos os elementos com class="intro".   EX: myElements = $(".intro");

        26.1.4- Encontrando Elementos HTML por Seletores CSS: Retorne uma lista de todos os elementos <p> com class="intro".   EX: myElements = $("p.intro");

    26.2- JQuery HTML:
        26.2.1- Definir conteúdo de texto: Defina o texto interno de um elemento HTML.   EX: myElement.text("Olá Mundo!");

        26.2.2- Obter conteúdo de texto: Obtenha o texto interno de um elemento HTML.   EX: myText = $("#02").text();

        26.2.3- Definir conteúdo HTML: Defina o conteúdo HTML de um elemento.   EX: myElement.html("<p>Hello World</p>");

        26.2.4- Obter conteúdo HTML: Obtenha o conteúdo HTML de um elemento.   EX: content = myElement.html();

    26.3- JQuery CSS: 
        26.3.1- Escondendo Elementos HTML: Ocultar um elemento HTML.   EX: myElement.hide();

        26.3.2- Mostrando Elementos HTML: Mostrar um elemento HTML.   EX: myElement.show();

        26.3.3- Estilizando Elementos HTML: Altere o tamanho da fonte de um elemento HTML.   EX: $("#demo").css("font-size","35px");

    26.4- JQuery DOM: 
        26.4.1- Removendo Elementos HTML: Remova um elemento HTML.   EX: $("#id02").remove();

        26.4.2- Obter elemento pai: Retorne o pai de um elemento HTML.   EX: myParent = $("#02").parent().prop("nodeName"); ;

27- Gráficos:
    27.1- Canvas: O HTML Canvas é perfeito para Gráficos de Dispersão, perfeito para gráficos de linha e perfeito para combinar Scatter e Lines

    27.2- Plotly: Plotly.js é uma biblioteca de gráficos que vem com mais de 40 tipos de gráficos, gráficos 3D, gráficos estatísticos e mapas SVG.

    27.3- Chart.js: Chart.js é uma biblioteca JavaScript gratuita para fazer gráficos baseados em HTML. É uma das bibliotecas de visualização mais simples para JavaScript e vem com os seguintes tipos de gráficos integrados: Gráfico de Dispersão, Gráfico de linha, Gráfico de barras, Gráfico de pizza, Gráfico de rosca, Gráfico de bolhas, Gráfico de área, Gráfico de radar e Gráfico misto

    27.4- Google Chart: De gráficos de linha simples a mapas de árvore hierárquicos complexos, a galeria de gráficos do Google oferece um grande número de tipos de gráficos prontos para uso: Gráfico de dispersão, Gráfico de linha, Gráfico de Barras/Colunas, Gráfico de área, Gráfico de pizza, Gráfico de rosca, Quadro organizacional e Mapa / Gráfico geográfico

28- Referência JavaScript e DOM: https://www.w3schools.com/jsref/default.asp

    